

# This file was *autogenerated* from the file plot.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_208 = Integer(208); _sage_const_161 = Integer(161); _sage_const_329 = Integer(329); _sage_const_423 = Integer(423); _sage_const_100 = Integer(100); _sage_const_248 = Integer(248); _sage_const_304 = Integer(304); _sage_const_199 = Integer(199); _sage_const_426 = Integer(426); _sage_const_394 = Integer(394); _sage_const_51 = Integer(51); _sage_const_79 = Integer(79); _sage_const_358 = Integer(358); _sage_const_275 = Integer(275); _sage_const_410 = Integer(410); _sage_const_104 = Integer(104); _sage_const_20 = Integer(20); _sage_const_185 = Integer(185); _sage_const_281 = Integer(281); _sage_const_239 = Integer(239); _sage_const_12 = Integer(12)
import networkx as nx
import matplotlib.pyplot as plt
from sage.all import *

p = _sage_const_2 **_sage_const_4  * _sage_const_3 **_sage_const_3  - _sage_const_1 
F = GF(p**_sage_const_2 , 'i', modulus=x**_sage_const_2 +_sage_const_1 , names=('i',)); (i,) = F._first_ngens(1)

def plot(G, clist, label = True):
	nx.draw_spring(G, with_labels=label, node_color=clist)
	plt.show()

def isogeny_graph(N):
	G = nx.Graph()
	E_0 = EllipticCurve(F, [_sage_const_0 , _sage_const_208 *i+_sage_const_161 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])

	visited = {}
	to_visit = [E_0]
	visited[E_0.j_invariant()] = len(visited)

	while(len(to_visit) != _sage_const_0 ):
		e = to_visit[_sage_const_0 ]
		assert(e.is_supersingular())

		for ker_phi_point in e(_sage_const_0 ).division_points(N):
			if(ker_phi_point.is_zero()):
				continue
			
			phi = EllipticCurveIsogeny(e, [e(_sage_const_0 ), ker_phi_point])

			G.add_edge(e.j_invariant(), phi.codomain().j_invariant())
			
			if(phi.codomain().j_invariant() not in visited.keys()):
				to_visit = to_visit + [phi.codomain()]
				visited[phi.codomain().j_invariant()] = len(visited)
		
		to_visit = to_visit[_sage_const_1 :]

	return G

def walk_graph(E, S, P_s, Q_s, l, d):
	colorset = set()
	E_new, P_new, Q_new, S_new = E, P_s, Q_s, S
	
	for i in range(d, _sage_const_0 , -_sage_const_1 ):
		S_step = l**(i-_sage_const_1 ) * S_new
		phi = EllipticCurveIsogeny(E_new, [E_new(_sage_const_0 ), S_step])
		E_new = phi.codomain()
		P_new, Q_new, S_new = phi(P_new), phi(Q_new), phi(S_new)
		colorset.add(E_new.j_invariant())
	
	return E_new, P_new, Q_new, colorset


G_2 = isogeny_graph(_sage_const_2 )
G_3 = isogeny_graph(_sage_const_3 )

E = EllipticCurve(F, [_sage_const_0 , _sage_const_329 *i+_sage_const_423 , _sage_const_0 , _sage_const_1 , _sage_const_0 ])
PA, QA = E(_sage_const_100 *i + _sage_const_248 , _sage_const_304 *i + _sage_const_199 ), E(_sage_const_426 *i + _sage_const_394 , _sage_const_51 *i + _sage_const_79 )
PB, QB = E(_sage_const_358 *i + _sage_const_275 , _sage_const_410 *i + _sage_const_104 ), E(_sage_const_20 *i + _sage_const_185 , _sage_const_281 *i + _sage_const_239 )

print()
print("Predeclared values:")
print("Initial elliptic curve:", E)
print("Alice's basis:", PA, QA)
print("Bob's basis:", PB, QB)
print()

clist_2 = ['grey' if node == E.j_invariant() else 'cyan' for node in G_2.nodes()]
clist_3 = ['grey' if node == E.j_invariant() else 'cyan' for node in G_3.nodes()]
plot(G_2, clist_2)
plot(G_3, clist_3)

import random
kA = _sage_const_12  #random.randint(0, 2**4 - 1)
kB = _sage_const_3  #random.randint(0, 3**3 - 1)

SA = PA + kA*QA
SB = PB + kB*QB
EA, phiA_PB, phiA_QB, csetA = walk_graph(E, SA, PB, QB, _sage_const_2 , _sage_const_4 )
EB, phiB_PA, phiB_QA, csetB = walk_graph(E, SB, PA, QA, _sage_const_3 , _sage_const_3 )

print()
print("Public key computation:")
print("Alice's secret kA:", kA)
print("Bob's secret kB:", kB)
print("Alice's public key:", EA, phiA_PB, phiA_QB)
print("Bob's public key:", EB, phiB_PA, phiB_QA)
print()

clist_2 = ['orange' if node in csetA else 'lightgreen' if node in csetB else clist_2[i] for i,node in enumerate(G_2.nodes())]
clist_3 = ['orange' if node in csetA else 'lightgreen' if node in csetB else clist_3[i] for i,node in enumerate(G_3.nodes())]
plot(G_2, clist_2)
plot(G_3, clist_3)

SA = phiB_PA + kA*phiB_QA
SB = phiA_PB + kB*phiA_QB
EA_shared, _, _, csetA = walk_graph(EB, SA, phiB_PA, phiB_QA, _sage_const_2 , _sage_const_4 )
EB_shared, _, _, csetB = walk_graph(EA, SB, phiA_PB, phiA_QB, _sage_const_3 , _sage_const_3 )

print()
print("Shared secret key computation:")
print("Alice's shared secret key:", EA_shared.j_invariant())
print("Bob's shared secret key:", EB_shared.j_invariant())
print()

clist_2 = ['mediumpurple' if node in csetA else clist_2[i] for i,node in enumerate(G_2.nodes())]
clist_3 = ['mediumpurple' if node in csetB else clist_3[i] for i,node in enumerate(G_3.nodes())]
plot(G_2, clist_2)
plot(G_3, clist_3)


